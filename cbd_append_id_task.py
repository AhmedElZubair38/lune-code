# -*- coding: utf-8 -*-
"""CBD APPEND ID TASK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vYkcq401V-UKLuW3uvO3SyclU5PH-7zW
"""



















"""# **DEBIT**"""

import pandas as pd
import numpy as np

init_df = pd.read_csv("CBD DEBIT INIT.csv", dtype={'TXN_REF_NB': str})
output_df = pd.read_csv("CBD DEBIT OUTPUT.csv")

init_df['TXN_REF_NB'] = init_df['TXN_REF_NB'].str.zfill(12)

init_df_renamed = init_df.rename(columns={
    'ISSU_CRCY_EQ_AM': 'Amount',
    'MRCH_TY_CD': 'Mcc',
    'ACPTR_NM': 'Raw description'
})

init_df_unique = init_df_renamed.drop_duplicates(subset=['Amount', 'Mcc', 'Raw description']).copy()

init_df_unique['Amount'] = init_df_unique['Amount'].astype(float)
output_df['Amount'] = output_df['Amount'].astype(float)

def fuzzy_merge_unique(df1, df2, on, tolerance):
    merged = []
    for idx, row in df2.iterrows():
        matches = df1[
            (np.abs(df1[on] - row[on]) <= tolerance) &
            (df1['Mcc'] == row['Mcc']) &
            (df1['Raw description'] == row['Raw description'])
        ]
        if not matches.empty:
            matches = matches.copy()
            matches['diff'] = np.abs(matches[on] - row[on])
            match_row = matches.sort_values('diff').iloc[0]
            merged.append({**row, 'TXN_REF_NB': match_row['TXN_REF_NB']})
        else:
            merged.append({**row, 'TXN_REF_NB': None})
    return pd.DataFrame(merged)

merged_df = fuzzy_merge_unique(init_df_unique, output_df, 'Amount', tolerance=1)

cols = ['TXN_REF_NB'] + [col for col in merged_df.columns if col != 'TXN_REF_NB']
merged_df = merged_df[cols]

merged_df.to_excel("CBD DEBIT OUTPUT FINAL FIX.xlsx", index=False)

print("✅ Done: TXN_REF_NB uniquely matched using fuzzy matching with tolerance, moved to front, and saved correctly.")













"""# **ATM**"""

import pandas as pd
import numpy as np

init_df = pd.read_csv("CBD ATM INIT.csv", dtype={'TXN_REF_NB': str})
output_df = pd.read_csv("CBD ATM OUTPUT.csv")

init_df['TXN_REF_NB'] = init_df['TXN_REF_NB'].str.zfill(12)

init_df_renamed = init_df.rename(columns={
    'TXN_AM': 'Amount',
    'MRCH_TY_CD': 'Mcc',
    'ACPTR_NM': 'Raw Description'
})

init_df_unique = init_df_renamed.drop_duplicates(subset=['Amount', 'Mcc', 'Raw Description']).copy()

init_df_unique['Amount'] = init_df_unique['Amount'].astype(float)
output_df['Amount'] = output_df['Amount'].astype(float)

def fuzzy_merge_unique(df1, df2, on, tolerance):
    merged = []
    for idx, row in df2.iterrows():
        matches = df1[
            (np.abs(df1[on] - row[on]) <= tolerance) &
            (df1['Mcc'] == row['Mcc']) &
            (df1['Raw Description'] == row['Raw Description'])
        ]
        if not matches.empty:
            matches = matches.copy()
            matches['diff'] = np.abs(matches[on] - row[on])
            match_row = matches.sort_values('diff').iloc[0]
            merged.append({**row, 'TXN_REF_NB': match_row['TXN_REF_NB']})
        else:
            merged.append({**row, 'TXN_REF_NB': None})
    return pd.DataFrame(merged)

merged_df = fuzzy_merge_unique(init_df_unique, output_df, 'Amount', tolerance=0.1)

cols = ['TXN_REF_NB'] + [col for col in merged_df.columns if col != 'TXN_REF_NB']
merged_df = merged_df[cols]

merged_df.to_excel("CBD ATM OUTPUT FINAL FIX.xlsx", index=False)

print("✅ Done: TXN_REF_NB uniquely matched using fuzzy matching with tolerance, moved to front, and saved correctly.")











"""# **CC (credit)**"""

import pandas as pd
import numpy as np

init_df = pd.read_csv("CBD CC INIT.csv", dtype={'REF_NB': str})
output_df = pd.read_csv("CBD CC OUTPUT.csv")

# init_df['REF_NB'] = init_df['REF_NB'].str.zfill(12)

init_df_renamed = init_df.rename(columns={
    'TXN_AM': 'Amount',
    'MRCH_CAT_CD': 'Mcc',
    'TXN_DESC_TX': 'Raw description'
})

init_df_unique = init_df_renamed.drop_duplicates(subset=['Amount', 'Mcc', 'Raw description']).copy()

init_df_unique['Amount'] = init_df_unique['Amount'].astype(float)
output_df['Amount'] = output_df['Amount'].astype(float)

def fuzzy_merge_unique(df1, df2, on, tolerance):
    merged = []
    for idx, row in df2.iterrows():
        matches = df1[
            (np.abs(df1[on] - row[on]) <= tolerance) &
            (df1['Mcc'] == row['Mcc']) &
            (df1['Raw description'] == row['Raw description'])
        ]
        if not matches.empty:
            matches = matches.copy()
            matches['diff'] = np.abs(matches[on] - row[on])
            match_row = matches.sort_values('diff').iloc[0]
            merged.append({**row, 'REF_NB': match_row['REF_NB']})
        else:
            merged.append({**row, 'REF_NB': None})
    return pd.DataFrame(merged)

merged_df = fuzzy_merge_unique(init_df_unique, output_df, 'Amount', tolerance=1)

cols = ['REF_NB'] + [col for col in merged_df.columns if col != 'REF_NB']
merged_df = merged_df[cols]

merged_df.to_excel("CBD CC OUTPUT FINAL FIX.xlsx", index=False)

print("✅ Done: REF_NB uniquely matched using fuzzy matching with tolerance, moved to front, and saved correctly.")









"""# **DR**"""

import pandas as pd
import numpy as np

init_df = pd.read_csv("CBD ACC DR INIT.csv", dtype={'DP_history_PTID': str})
output_df = pd.read_csv("CBD ACC DR OUTPUT.csv")

init_df_renamed = init_df.rename(columns={
    'DP_history_amount_FCY': 'Amount',
    'DP_history_Transaction_Desc': 'Raw description'
})

init_df_unique = init_df_renamed.drop_duplicates(subset=['Amount', 'Raw description']).copy()

init_df_unique['Amount'] = init_df_unique['Amount'].astype(float)
output_df['Amount'] = output_df['Amount'].astype(float)

def fuzzy_merge_unique(df1, df2, on, tolerance):
    merged = []
    for idx, row in df2.iterrows():
        matches = df1[
            (np.abs(df1[on] - row[on]) <= tolerance) &
            (df1['Raw description'] == row['Raw description'])
        ]
        if not matches.empty:
            matches = matches.copy()
            matches['diff'] = np.abs(matches[on] - row[on])
            match_row = matches.sort_values('diff').iloc[0]
            merged.append({**row, 'DP_history_PTID': match_row['DP_history_PTID']})
        else:
            merged.append({**row, 'DP_history_PTID': None})
    return pd.DataFrame(merged)

merged_df = fuzzy_merge_unique(init_df_unique, output_df, 'Amount', tolerance=1)

cols = ['DP_history_PTID'] + [col for col in merged_df.columns if col != 'DP_history_PTID']
merged_df = merged_df[cols]

merged_df.to_excel("CBD ACC DR OUTPUT FINAL FIX.xlsx", index=False)

print("✅ Done: DP_history_PTID uniquely matched using fuzzy matching with tolerance, moved to front, and saved correctly.")













"""# **CR**"""

import pandas as pd
import numpy as np

init_df = pd.read_csv("CBD ACC CR INIT.csv", dtype={'DP_history_PTID': str})
output_df = pd.read_csv("CBD ACC CR OUTPUT.csv")

init_df_renamed = init_df.rename(columns={
    'DP_history_amount_FCY': 'Amount',
    'DP_history_Transaction_Desc': 'Raw description'
})

init_df_unique = init_df_renamed.drop_duplicates(subset=['Amount', 'Raw description']).copy()

init_df_unique['Amount'] = init_df_unique['Amount'].astype(float)
output_df['Amount'] = output_df['Amount'].astype(float)

def fuzzy_merge_unique(df1, df2, on, tolerance):
    merged = []
    for idx, row in df2.iterrows():
        matches = df1[
            (np.abs(df1[on] - row[on]) <= tolerance) &
            (df1['Raw description'] == row['Raw description'])
        ]
        if not matches.empty:
            matches = matches.copy()
            matches['diff'] = np.abs(matches[on] - row[on])
            match_row = matches.sort_values('diff').iloc[0]
            merged.append({**row, 'DP_history_PTID': match_row['DP_history_PTID']})
        else:
            merged.append({**row, 'DP_history_PTID': None})
    return pd.DataFrame(merged)

merged_df = fuzzy_merge_unique(init_df_unique, output_df, 'Amount', tolerance=1)

cols = ['DP_history_PTID'] + [col for col in merged_df.columns if col != 'DP_history_PTID']
merged_df = merged_df[cols]

merged_df.to_excel("CBD ACC CR OUTPUT FINAL FIX.xlsx", index=False)

print("✅ Done: DP_history_PTID uniquely matched using fuzzy matching with tolerance, moved to front, and saved correctly.")

